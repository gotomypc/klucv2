//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ffp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TrainingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TrainingDataSet : global::System.Data.DataSet {
        
        private TrainingDataTable tableTraining;
        
        private ExpressionDataTable tableExpression;
        
        private global::System.Data.DataRelation relationFK_Training_Expression;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TrainingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TrainingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Training"] != null)) {
                    base.Tables.Add(new TrainingDataTable(ds.Tables["Training"]));
                }
                if ((ds.Tables["Expression"] != null)) {
                    base.Tables.Add(new ExpressionDataTable(ds.Tables["Expression"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrainingDataTable Training {
            get {
                return this.tableTraining;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExpressionDataTable Expression {
            get {
                return this.tableExpression;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TrainingDataSet cln = ((TrainingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Training"] != null)) {
                    base.Tables.Add(new TrainingDataTable(ds.Tables["Training"]));
                }
                if ((ds.Tables["Expression"] != null)) {
                    base.Tables.Add(new ExpressionDataTable(ds.Tables["Expression"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTraining = ((TrainingDataTable)(base.Tables["Training"]));
            if ((initTable == true)) {
                if ((this.tableTraining != null)) {
                    this.tableTraining.InitVars();
                }
            }
            this.tableExpression = ((ExpressionDataTable)(base.Tables["Expression"]));
            if ((initTable == true)) {
                if ((this.tableExpression != null)) {
                    this.tableExpression.InitVars();
                }
            }
            this.relationFK_Training_Expression = this.Relations["FK_Training_Expression"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TrainingDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.fh-swf.de/TrainingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTraining = new TrainingDataTable();
            base.Tables.Add(this.tableTraining);
            this.tableExpression = new ExpressionDataTable();
            base.Tables.Add(this.tableExpression);
            this.relationFK_Training_Expression = new global::System.Data.DataRelation("FK_Training_Expression", new global::System.Data.DataColumn[] {
                        this.tableExpression.ExpressionOIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableTraining.ExpressionOIDColumn}, false);
            this.Relations.Add(this.relationFK_Training_Expression);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTraining() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExpression() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TrainingDataSet ds = new TrainingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TrainingRowChangeEventHandler(object sender, TrainingRowChangeEvent e);
        
        public delegate void ExpressionRowChangeEventHandler(object sender, ExpressionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrainingDataTable : global::System.Data.TypedTableBase<TrainingRow> {
            
            private global::System.Data.DataColumn columnTrainingOID;
            
            private global::System.Data.DataColumn columnExpressionOID;
            
            private global::System.Data.DataColumn columnLipCornerLeftX;
            
            private global::System.Data.DataColumn columnLipCornerLeftY;
            
            private global::System.Data.DataColumn columnLipCornerRightX;
            
            private global::System.Data.DataColumn columnLipCornerRightY;
            
            private global::System.Data.DataColumn columnLipUpLeftX;
            
            private global::System.Data.DataColumn columnLipUpLeftY;
            
            private global::System.Data.DataColumn columnLipUpCenterX;
            
            private global::System.Data.DataColumn columnLipUpCenterY;
            
            private global::System.Data.DataColumn columnLipUpRightX;
            
            private global::System.Data.DataColumn columnLipUpRightY;
            
            private global::System.Data.DataColumn columnLipBottomLeftX;
            
            private global::System.Data.DataColumn columnLipBottomLeftY;
            
            private global::System.Data.DataColumn columnLipBottomCenterX;
            
            private global::System.Data.DataColumn columnLipBottomCenterY;
            
            private global::System.Data.DataColumn columnLipBottomRightX;
            
            private global::System.Data.DataColumn columnLipBottomRightY;
            
            private global::System.Data.DataColumn columnEyeDistance;
            
            private global::System.Data.DataColumn columnThumbnail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingDataTable() {
                this.TableName = "Training";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrainingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrainingOIDColumn {
                get {
                    return this.columnTrainingOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpressionOIDColumn {
                get {
                    return this.columnExpressionOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipCornerLeftXColumn {
                get {
                    return this.columnLipCornerLeftX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipCornerLeftYColumn {
                get {
                    return this.columnLipCornerLeftY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipCornerRightXColumn {
                get {
                    return this.columnLipCornerRightX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipCornerRightYColumn {
                get {
                    return this.columnLipCornerRightY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpLeftXColumn {
                get {
                    return this.columnLipUpLeftX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpLeftYColumn {
                get {
                    return this.columnLipUpLeftY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpCenterXColumn {
                get {
                    return this.columnLipUpCenterX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpCenterYColumn {
                get {
                    return this.columnLipUpCenterY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpRightXColumn {
                get {
                    return this.columnLipUpRightX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipUpRightYColumn {
                get {
                    return this.columnLipUpRightY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomLeftXColumn {
                get {
                    return this.columnLipBottomLeftX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomLeftYColumn {
                get {
                    return this.columnLipBottomLeftY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomCenterXColumn {
                get {
                    return this.columnLipBottomCenterX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomCenterYColumn {
                get {
                    return this.columnLipBottomCenterY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomRightXColumn {
                get {
                    return this.columnLipBottomRightX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LipBottomRightYColumn {
                get {
                    return this.columnLipBottomRightY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EyeDistanceColumn {
                get {
                    return this.columnEyeDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThumbnailColumn {
                get {
                    return this.columnThumbnail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow this[int index] {
                get {
                    return ((TrainingRow)(this.Rows[index]));
                }
            }
            
            public event TrainingRowChangeEventHandler TrainingRowChanging;
            
            public event TrainingRowChangeEventHandler TrainingRowChanged;
            
            public event TrainingRowChangeEventHandler TrainingRowDeleting;
            
            public event TrainingRowChangeEventHandler TrainingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrainingRow(TrainingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow AddTrainingRow(
                        ExpressionRow parentExpressionRowByFK_Training_Expression, 
                        double LipCornerLeftX, 
                        double LipCornerLeftY, 
                        double LipCornerRightX, 
                        double LipCornerRightY, 
                        double LipUpLeftX, 
                        double LipUpLeftY, 
                        double LipUpCenterX, 
                        double LipUpCenterY, 
                        double LipUpRightX, 
                        double LipUpRightY, 
                        double LipBottomLeftX, 
                        double LipBottomLeftY, 
                        double LipBottomCenterX, 
                        double LipBottomCenterY, 
                        double LipBottomRightX, 
                        double LipBottomRightY, 
                        double EyeDistance, 
                        byte[] Thumbnail) {
                TrainingRow rowTrainingRow = ((TrainingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        LipCornerLeftX,
                        LipCornerLeftY,
                        LipCornerRightX,
                        LipCornerRightY,
                        LipUpLeftX,
                        LipUpLeftY,
                        LipUpCenterX,
                        LipUpCenterY,
                        LipUpRightX,
                        LipUpRightY,
                        LipBottomLeftX,
                        LipBottomLeftY,
                        LipBottomCenterX,
                        LipBottomCenterY,
                        LipBottomRightX,
                        LipBottomRightY,
                        EyeDistance,
                        Thumbnail};
                if ((parentExpressionRowByFK_Training_Expression != null)) {
                    columnValuesArray[1] = parentExpressionRowByFK_Training_Expression[0];
                }
                rowTrainingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrainingRow);
                return rowTrainingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow FindByTrainingOID(int TrainingOID) {
                return ((TrainingRow)(this.Rows.Find(new object[] {
                            TrainingOID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TrainingDataTable cln = ((TrainingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TrainingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTrainingOID = base.Columns["TrainingOID"];
                this.columnExpressionOID = base.Columns["ExpressionOID"];
                this.columnLipCornerLeftX = base.Columns["LipCornerLeftX"];
                this.columnLipCornerLeftY = base.Columns["LipCornerLeftY"];
                this.columnLipCornerRightX = base.Columns["LipCornerRightX"];
                this.columnLipCornerRightY = base.Columns["LipCornerRightY"];
                this.columnLipUpLeftX = base.Columns["LipUpLeftX"];
                this.columnLipUpLeftY = base.Columns["LipUpLeftY"];
                this.columnLipUpCenterX = base.Columns["LipUpCenterX"];
                this.columnLipUpCenterY = base.Columns["LipUpCenterY"];
                this.columnLipUpRightX = base.Columns["LipUpRightX"];
                this.columnLipUpRightY = base.Columns["LipUpRightY"];
                this.columnLipBottomLeftX = base.Columns["LipBottomLeftX"];
                this.columnLipBottomLeftY = base.Columns["LipBottomLeftY"];
                this.columnLipBottomCenterX = base.Columns["LipBottomCenterX"];
                this.columnLipBottomCenterY = base.Columns["LipBottomCenterY"];
                this.columnLipBottomRightX = base.Columns["LipBottomRightX"];
                this.columnLipBottomRightY = base.Columns["LipBottomRightY"];
                this.columnEyeDistance = base.Columns["EyeDistance"];
                this.columnThumbnail = base.Columns["Thumbnail"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTrainingOID = new global::System.Data.DataColumn("TrainingOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrainingOID);
                this.columnExpressionOID = new global::System.Data.DataColumn("ExpressionOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpressionOID);
                this.columnLipCornerLeftX = new global::System.Data.DataColumn("LipCornerLeftX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipCornerLeftX);
                this.columnLipCornerLeftY = new global::System.Data.DataColumn("LipCornerLeftY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipCornerLeftY);
                this.columnLipCornerRightX = new global::System.Data.DataColumn("LipCornerRightX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipCornerRightX);
                this.columnLipCornerRightY = new global::System.Data.DataColumn("LipCornerRightY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipCornerRightY);
                this.columnLipUpLeftX = new global::System.Data.DataColumn("LipUpLeftX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpLeftX);
                this.columnLipUpLeftY = new global::System.Data.DataColumn("LipUpLeftY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpLeftY);
                this.columnLipUpCenterX = new global::System.Data.DataColumn("LipUpCenterX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpCenterX);
                this.columnLipUpCenterY = new global::System.Data.DataColumn("LipUpCenterY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpCenterY);
                this.columnLipUpRightX = new global::System.Data.DataColumn("LipUpRightX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpRightX);
                this.columnLipUpRightY = new global::System.Data.DataColumn("LipUpRightY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipUpRightY);
                this.columnLipBottomLeftX = new global::System.Data.DataColumn("LipBottomLeftX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomLeftX);
                this.columnLipBottomLeftY = new global::System.Data.DataColumn("LipBottomLeftY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomLeftY);
                this.columnLipBottomCenterX = new global::System.Data.DataColumn("LipBottomCenterX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomCenterX);
                this.columnLipBottomCenterY = new global::System.Data.DataColumn("LipBottomCenterY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomCenterY);
                this.columnLipBottomRightX = new global::System.Data.DataColumn("LipBottomRightX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomRightX);
                this.columnLipBottomRightY = new global::System.Data.DataColumn("LipBottomRightY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLipBottomRightY);
                this.columnEyeDistance = new global::System.Data.DataColumn("EyeDistance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEyeDistance);
                this.columnThumbnail = new global::System.Data.DataColumn("Thumbnail", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThumbnail);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTrainingOID}, true));
                this.columnTrainingOID.AutoIncrement = true;
                this.columnTrainingOID.AutoIncrementSeed = -1;
                this.columnTrainingOID.AutoIncrementStep = -1;
                this.columnTrainingOID.AllowDBNull = false;
                this.columnTrainingOID.ReadOnly = true;
                this.columnTrainingOID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow NewTrainingRow() {
                return ((TrainingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TrainingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TrainingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrainingRowChanged != null)) {
                    this.TrainingRowChanged(this, new TrainingRowChangeEvent(((TrainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrainingRowChanging != null)) {
                    this.TrainingRowChanging(this, new TrainingRowChangeEvent(((TrainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrainingRowDeleted != null)) {
                    this.TrainingRowDeleted(this, new TrainingRowChangeEvent(((TrainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrainingRowDeleting != null)) {
                    this.TrainingRowDeleting(this, new TrainingRowChangeEvent(((TrainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrainingRow(TrainingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TrainingDataSet ds = new TrainingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrainingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExpressionDataTable : global::System.Data.TypedTableBase<ExpressionRow> {
            
            private global::System.Data.DataColumn columnExpressionOID;
            
            private global::System.Data.DataColumn columnExpression;
            
            private global::System.Data.DataColumn columnThumbnail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionDataTable() {
                this.TableName = "Expression";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpressionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExpressionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpressionOIDColumn {
                get {
                    return this.columnExpressionOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpressionColumn {
                get {
                    return this.columnExpression;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThumbnailColumn {
                get {
                    return this.columnThumbnail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow this[int index] {
                get {
                    return ((ExpressionRow)(this.Rows[index]));
                }
            }
            
            public event ExpressionRowChangeEventHandler ExpressionRowChanging;
            
            public event ExpressionRowChangeEventHandler ExpressionRowChanged;
            
            public event ExpressionRowChangeEventHandler ExpressionRowDeleting;
            
            public event ExpressionRowChangeEventHandler ExpressionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExpressionRow(ExpressionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow AddExpressionRow(string Expression, byte[] Thumbnail) {
                ExpressionRow rowExpressionRow = ((ExpressionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Expression,
                        Thumbnail};
                rowExpressionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExpressionRow);
                return rowExpressionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow FindByExpressionOID(int ExpressionOID) {
                return ((ExpressionRow)(this.Rows.Find(new object[] {
                            ExpressionOID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExpressionDataTable cln = ((ExpressionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExpressionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExpressionOID = base.Columns["ExpressionOID"];
                this.columnExpression = base.Columns["Expression"];
                this.columnThumbnail = base.Columns["Thumbnail"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExpressionOID = new global::System.Data.DataColumn("ExpressionOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpressionOID);
                this.columnExpression = new global::System.Data.DataColumn("Expression", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpression);
                this.columnThumbnail = new global::System.Data.DataColumn("Thumbnail", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThumbnail);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnExpression}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnExpressionOID}, true));
                this.columnExpressionOID.AutoIncrement = true;
                this.columnExpressionOID.AutoIncrementSeed = -1;
                this.columnExpressionOID.AutoIncrementStep = -1;
                this.columnExpressionOID.AllowDBNull = false;
                this.columnExpressionOID.ReadOnly = true;
                this.columnExpressionOID.Unique = true;
                this.columnExpression.AllowDBNull = false;
                this.columnExpression.Unique = true;
                this.columnExpression.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow NewExpressionRow() {
                return ((ExpressionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExpressionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExpressionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExpressionRowChanged != null)) {
                    this.ExpressionRowChanged(this, new ExpressionRowChangeEvent(((ExpressionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExpressionRowChanging != null)) {
                    this.ExpressionRowChanging(this, new ExpressionRowChangeEvent(((ExpressionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExpressionRowDeleted != null)) {
                    this.ExpressionRowDeleted(this, new ExpressionRowChangeEvent(((ExpressionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExpressionRowDeleting != null)) {
                    this.ExpressionRowDeleting(this, new ExpressionRowChangeEvent(((ExpressionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExpressionRow(ExpressionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TrainingDataSet ds = new TrainingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExpressionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrainingRow : global::System.Data.DataRow {
            
            private TrainingDataTable tableTraining;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTraining = ((TrainingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrainingOID {
                get {
                    return ((int)(this[this.tableTraining.TrainingOIDColumn]));
                }
                set {
                    this[this.tableTraining.TrainingOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExpressionOID {
                get {
                    try {
                        return ((int)(this[this.tableTraining.ExpressionOIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpressionOID\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.ExpressionOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipCornerLeftX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipCornerLeftXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipCornerLeftX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipCornerLeftXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipCornerLeftY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipCornerLeftYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipCornerLeftY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipCornerLeftYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipCornerRightX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipCornerRightXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipCornerRightX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipCornerRightXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipCornerRightY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipCornerRightYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipCornerRightY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipCornerRightYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpLeftX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpLeftXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpLeftX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpLeftXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpLeftY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpLeftYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpLeftY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpLeftYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpCenterX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpCenterXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpCenterX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpCenterXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpCenterY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpCenterYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpCenterY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpCenterYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpRightX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpRightXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpRightX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpRightXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipUpRightY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipUpRightYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipUpRightY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipUpRightYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomLeftX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomLeftXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomLeftX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomLeftXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomLeftY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomLeftYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomLeftY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomLeftYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomCenterX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomCenterXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomCenterX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomCenterXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomCenterY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomCenterYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomCenterY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomCenterYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomRightX {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomRightXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomRightX\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomRightXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LipBottomRightY {
                get {
                    try {
                        return ((double)(this[this.tableTraining.LipBottomRightYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LipBottomRightY\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.LipBottomRightYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EyeDistance {
                get {
                    try {
                        return ((double)(this[this.tableTraining.EyeDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EyeDistance\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.EyeDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Thumbnail {
                get {
                    try {
                        return ((byte[])(this[this.tableTraining.ThumbnailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thumbnail\' in table \'Training\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTraining.ThumbnailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow ExpressionRow {
                get {
                    return ((ExpressionRow)(this.GetParentRow(this.Table.ParentRelations["FK_Training_Expression"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Training_Expression"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpressionOIDNull() {
                return this.IsNull(this.tableTraining.ExpressionOIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpressionOIDNull() {
                this[this.tableTraining.ExpressionOIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipCornerLeftXNull() {
                return this.IsNull(this.tableTraining.LipCornerLeftXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipCornerLeftXNull() {
                this[this.tableTraining.LipCornerLeftXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipCornerLeftYNull() {
                return this.IsNull(this.tableTraining.LipCornerLeftYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipCornerLeftYNull() {
                this[this.tableTraining.LipCornerLeftYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipCornerRightXNull() {
                return this.IsNull(this.tableTraining.LipCornerRightXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipCornerRightXNull() {
                this[this.tableTraining.LipCornerRightXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipCornerRightYNull() {
                return this.IsNull(this.tableTraining.LipCornerRightYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipCornerRightYNull() {
                this[this.tableTraining.LipCornerRightYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpLeftXNull() {
                return this.IsNull(this.tableTraining.LipUpLeftXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpLeftXNull() {
                this[this.tableTraining.LipUpLeftXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpLeftYNull() {
                return this.IsNull(this.tableTraining.LipUpLeftYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpLeftYNull() {
                this[this.tableTraining.LipUpLeftYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpCenterXNull() {
                return this.IsNull(this.tableTraining.LipUpCenterXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpCenterXNull() {
                this[this.tableTraining.LipUpCenterXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpCenterYNull() {
                return this.IsNull(this.tableTraining.LipUpCenterYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpCenterYNull() {
                this[this.tableTraining.LipUpCenterYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpRightXNull() {
                return this.IsNull(this.tableTraining.LipUpRightXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpRightXNull() {
                this[this.tableTraining.LipUpRightXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipUpRightYNull() {
                return this.IsNull(this.tableTraining.LipUpRightYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipUpRightYNull() {
                this[this.tableTraining.LipUpRightYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomLeftXNull() {
                return this.IsNull(this.tableTraining.LipBottomLeftXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomLeftXNull() {
                this[this.tableTraining.LipBottomLeftXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomLeftYNull() {
                return this.IsNull(this.tableTraining.LipBottomLeftYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomLeftYNull() {
                this[this.tableTraining.LipBottomLeftYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomCenterXNull() {
                return this.IsNull(this.tableTraining.LipBottomCenterXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomCenterXNull() {
                this[this.tableTraining.LipBottomCenterXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomCenterYNull() {
                return this.IsNull(this.tableTraining.LipBottomCenterYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomCenterYNull() {
                this[this.tableTraining.LipBottomCenterYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomRightXNull() {
                return this.IsNull(this.tableTraining.LipBottomRightXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomRightXNull() {
                this[this.tableTraining.LipBottomRightXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLipBottomRightYNull() {
                return this.IsNull(this.tableTraining.LipBottomRightYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLipBottomRightYNull() {
                this[this.tableTraining.LipBottomRightYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEyeDistanceNull() {
                return this.IsNull(this.tableTraining.EyeDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEyeDistanceNull() {
                this[this.tableTraining.EyeDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThumbnailNull() {
                return this.IsNull(this.tableTraining.ThumbnailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThumbnailNull() {
                this[this.tableTraining.ThumbnailColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExpressionRow : global::System.Data.DataRow {
            
            private ExpressionDataTable tableExpression;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpressionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExpression = ((ExpressionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExpressionOID {
                get {
                    return ((int)(this[this.tableExpression.ExpressionOIDColumn]));
                }
                set {
                    this[this.tableExpression.ExpressionOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Expression {
                get {
                    return ((string)(this[this.tableExpression.ExpressionColumn]));
                }
                set {
                    this[this.tableExpression.ExpressionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Thumbnail {
                get {
                    try {
                        return ((byte[])(this[this.tableExpression.ThumbnailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thumbnail\' in table \'Expression\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpression.ThumbnailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThumbnailNull() {
                return this.IsNull(this.tableExpression.ThumbnailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThumbnailNull() {
                this[this.tableExpression.ThumbnailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow[] GetTrainingRows() {
                if ((this.Table.ChildRelations["FK_Training_Expression"] == null)) {
                    return new TrainingRow[0];
                }
                else {
                    return ((TrainingRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Training_Expression"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrainingRowChangeEvent : global::System.EventArgs {
            
            private TrainingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRowChangeEvent(TrainingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExpressionRowChangeEvent : global::System.EventArgs {
            
            private ExpressionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRowChangeEvent(ExpressionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpressionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ffp.TrainingDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TrainingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TrainingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Training";
            tableMapping.ColumnMappings.Add("TrainingOID", "TrainingOID");
            tableMapping.ColumnMappings.Add("ExpressionOID", "ExpressionOID");
            tableMapping.ColumnMappings.Add("LipCornerLeftX", "LipCornerLeftX");
            tableMapping.ColumnMappings.Add("LipCornerLeftY", "LipCornerLeftY");
            tableMapping.ColumnMappings.Add("LipCornerRightX", "LipCornerRightX");
            tableMapping.ColumnMappings.Add("LipCornerRightY", "LipCornerRightY");
            tableMapping.ColumnMappings.Add("LipUpLeftX", "LipUpLeftX");
            tableMapping.ColumnMappings.Add("LipUpLeftY", "LipUpLeftY");
            tableMapping.ColumnMappings.Add("LipUpCenterX", "LipUpCenterX");
            tableMapping.ColumnMappings.Add("LipUpCenterY", "LipUpCenterY");
            tableMapping.ColumnMappings.Add("LipUpRightX", "LipUpRightX");
            tableMapping.ColumnMappings.Add("LipUpRightY", "LipUpRightY");
            tableMapping.ColumnMappings.Add("LipBottomLeftX", "LipBottomLeftX");
            tableMapping.ColumnMappings.Add("LipBottomLeftY", "LipBottomLeftY");
            tableMapping.ColumnMappings.Add("LipBottomCenterX", "LipBottomCenterX");
            tableMapping.ColumnMappings.Add("LipBottomCenterY", "LipBottomCenterY");
            tableMapping.ColumnMappings.Add("LipBottomRightX", "LipBottomRightX");
            tableMapping.ColumnMappings.Add("LipBottomRightY", "LipBottomRightY");
            tableMapping.ColumnMappings.Add("EyeDistance", "EyeDistance");
            tableMapping.ColumnMappings.Add("Thumbnail", "Thumbnail");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Training] WHERE (([TrainingOID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TrainingOID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Training] ([ExpressionOID], [LipCornerLeftX], [LipCornerLeftY], [LipCornerRightX], [LipCornerRightY], [LipUpLeftX], [LipUpLeftY], [LipUpCenterX], [LipUpCenterY], [LipUpRightX], [LipUpRightY], [LipBottomLeftX], [LipBottomLeftY], [LipBottomCenterX], [LipBottomCenterY], [LipBottomRightX], [LipBottomRightY], [EyeDistance], [Thumbnail]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpressionOID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpCenterX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpCenterY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomCenterX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomCenterY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EyeDistance", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Training] SET [ExpressionOID] = @p1, [LipCornerLeftX] = @p2, [LipCornerLeftY] = @p3, [LipCornerRightX] = @p4, [LipCornerRightY] = @p5, [LipUpLeftX] = @p6, [LipUpLeftY] = @p7, [LipUpCenterX] = @p8, [LipUpCenterY] = @p9, [LipUpRightX] = @p10, [LipUpRightY] = @p11, [LipBottomLeftX] = @p12, [LipBottomLeftY] = @p13, [LipBottomCenterX] = @p14, [LipBottomCenterY] = @p15, [LipBottomRightX] = @p16, [LipBottomRightY] = @p17, [EyeDistance] = @p18, [Thumbnail] = @p19 WHERE (([TrainingOID] = @p20))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpressionOID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipCornerRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpCenterX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpCenterY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipUpRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomLeftX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomLeftY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomCenterX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomCenterY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomRightX", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LipBottomRightY", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EyeDistance", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p20", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TrainingOID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::ffp.Properties.Settings.Default.TrainingDatasetsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [TrainingOID], [ExpressionOID], [LipCornerLeftX], [LipCornerLeftY], [LipCornerRightX], [LipCornerRightY], [LipUpLeftX], [LipUpLeftY], [LipUpCenterX], [LipUpCenterY], [LipUpRightX], [LipUpRightY], [LipBottomLeftX], [LipBottomLeftY], [LipBottomCenterX], [LipBottomCenterY], [LipBottomRightX], [LipBottomRightY], [EyeDistance], [Thumbnail] FROM [Training]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TrainingDataSet.TrainingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TrainingDataSet.TrainingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TrainingDataSet.TrainingDataTable dataTable = new TrainingDataSet.TrainingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TrainingDataSet.TrainingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TrainingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Training");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> p1, 
                    global::System.Nullable<double> p2, 
                    global::System.Nullable<double> p3, 
                    global::System.Nullable<double> p4, 
                    global::System.Nullable<double> p5, 
                    global::System.Nullable<double> p6, 
                    global::System.Nullable<double> p7, 
                    global::System.Nullable<double> p8, 
                    global::System.Nullable<double> p9, 
                    global::System.Nullable<double> p10, 
                    global::System.Nullable<double> p11, 
                    global::System.Nullable<double> p12, 
                    global::System.Nullable<double> p13, 
                    global::System.Nullable<double> p14, 
                    global::System.Nullable<double> p15, 
                    global::System.Nullable<double> p16, 
                    global::System.Nullable<double> p17, 
                    global::System.Nullable<double> p18, 
                    byte[] p19) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(p11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(p14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((p15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(p15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((p16.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(p16.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((p17.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(p17.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((p18.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(p18.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((p19 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((byte[])(p19));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> p1, 
                    global::System.Nullable<double> p2, 
                    global::System.Nullable<double> p3, 
                    global::System.Nullable<double> p4, 
                    global::System.Nullable<double> p5, 
                    global::System.Nullable<double> p6, 
                    global::System.Nullable<double> p7, 
                    global::System.Nullable<double> p8, 
                    global::System.Nullable<double> p9, 
                    global::System.Nullable<double> p10, 
                    global::System.Nullable<double> p11, 
                    global::System.Nullable<double> p12, 
                    global::System.Nullable<double> p13, 
                    global::System.Nullable<double> p14, 
                    global::System.Nullable<double> p15, 
                    global::System.Nullable<double> p16, 
                    global::System.Nullable<double> p17, 
                    global::System.Nullable<double> p18, 
                    byte[] p19, 
                    int p20) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(p7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(p10.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(p11.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(p12.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(p13.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(p14.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((p15.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(p15.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((p16.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(p16.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((p17.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(p17.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((p18.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(p18.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((p19 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((byte[])(p19));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(p20));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExpressionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExpressionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Expression";
            tableMapping.ColumnMappings.Add("ExpressionOID", "ExpressionOID");
            tableMapping.ColumnMappings.Add("Expression", "Expression");
            tableMapping.ColumnMappings.Add("Thumbnail", "Thumbnail");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Expression] WHERE (([ExpressionOID] = @p1) AND ([Expression] = @p2))" +
                "";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpressionOID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Expression", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Expression] ([Expression], [Thumbnail]) VALUES (@p1, @p2)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Expression", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Expression] SET [Expression] = @p1, [Thumbnail] = @p2 WHERE (([Expression" +
                "OID] = @p3) AND ([Expression] = @p4))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Expression", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Thumbnail", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpressionOID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Expression", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::ffp.Properties.Settings.Default.TrainingDatasetsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ExpressionOID], [Expression], [Thumbnail] FROM [Expression]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TrainingDataSet.ExpressionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TrainingDataSet.ExpressionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TrainingDataSet.ExpressionDataTable dataTable = new TrainingDataSet.ExpressionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TrainingDataSet.ExpressionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TrainingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Expression");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1, string p2) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, byte[] p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((byte[])(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, byte[] p2, int p3, string p4) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((byte[])(p2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3));
            if ((p4 == null)) {
                throw new global::System.ArgumentNullException("p4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TrainingTableAdapter _trainingTableAdapter;
        
        private ExpressionTableAdapter _expressionTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TrainingTableAdapter TrainingTableAdapter {
            get {
                return this._trainingTableAdapter;
            }
            set {
                this._trainingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ExpressionTableAdapter ExpressionTableAdapter {
            get {
                return this._expressionTableAdapter;
            }
            set {
                this._expressionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._trainingTableAdapter != null) 
                            && (this._trainingTableAdapter.Connection != null))) {
                    return this._trainingTableAdapter.Connection;
                }
                if (((this._expressionTableAdapter != null) 
                            && (this._expressionTableAdapter.Connection != null))) {
                    return this._expressionTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._trainingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._expressionTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(TrainingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._expressionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Expression.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._expressionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._trainingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Training.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._trainingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(TrainingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._expressionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Expression.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._expressionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._trainingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Training.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._trainingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(TrainingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._trainingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Training.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._trainingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._expressionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Expression.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._expressionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(TrainingDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._trainingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._trainingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._expressionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._expressionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._trainingTableAdapter != null)) {
                    revertConnections.Add(this._trainingTableAdapter, this._trainingTableAdapter.Connection);
                    this._trainingTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._trainingTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._trainingTableAdapter.Adapter);
                    }
                }
                if ((this._expressionTableAdapter != null)) {
                    revertConnections.Add(this._expressionTableAdapter, this._expressionTableAdapter.Connection);
                    this._expressionTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._expressionTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._expressionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._expressionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._expressionTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._trainingTableAdapter != null)) {
                    this._trainingTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._trainingTableAdapter]));
                    this._trainingTableAdapter.Transaction = null;
                }
                if ((this._expressionTableAdapter != null)) {
                    this._expressionTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._expressionTableAdapter]));
                    this._expressionTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591